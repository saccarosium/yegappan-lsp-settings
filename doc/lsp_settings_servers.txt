LSP SERVER LIST                                     *lsp-settings-server-list*

ADA LS ~
Usage: >
    call lsp_settings#AdaLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "ada"
      ],
      "name": "ada_ls",
      "path": "ada_language_server"
    }

AGDA LS ~
Usage: >
    call lsp_settings#AgdaLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "agda"
      ],
      "name": "agda_ls",
      "path": "als"
    }

AIKEN ~
Usage: >
    call lsp_settings#Aiken()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "aiken"
      ],
      "name": "aiken",
      "path": "aiken"
    }

ANAKIN LANGUAGE SERVER ~
Usage: >
    call lsp_settings#AnakinLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "python"
      ],
      "name": "anakin_language_server",
      "path": "anakinls",
      "workspaceConfig": {
        "settings": {
          "anakinls": {
            "pyflakes_errors": [
              "ImportStarNotPermitted",
              "UndefinedExport",
              "UndefinedLocal",
              "UndefinedName",
              "DuplicateArgument",
              "MultiValueRepeatedKeyLiteral",
              "MultiValueRepeatedKeyVariable",
              "FutureFeatureNotDefined",
              "LateFutureImport",
              "ReturnOutsideFunction",
              "YieldOutsideFunction",
              "ContinueOutsideLoop",
              "BreakOutsideLoop",
              "TwoStarredExpressions",
              "TooManyExpressionsInStarredAssignment",
              "ForwardAnnotationSyntaxError",
              "RaiseNotImplemented",
              "StringDotFormatExtraPositionalArguments",
              "StringDotFormatExtraNamedArguments",
              "StringDotFormatMissingArgument",
              "StringDotFormatMixingAutomatic",
              "StringDotFormatInvalidFormat",
              "PercentFormatInvalidFormat",
              "PercentFormatMixedPositionalAndNamed",
              "PercentFormatUnsupportedFormat",
              "PercentFormatPositionalCountMismatch",
              "PercentFormatExtraNamedArguments",
              "PercentFormatMissingArgument",
              "PercentFormatExpectedMapping",
              "PercentFormatExpectedSequence",
              "PercentFormatStarRequiresSequence"
            ]
          }
        }
      }
    }

ANGULARLS ~
Usage: >
    call lsp_settings#Angularls()
<
Defaults: >
    {
      "args": [
        "--stdio",
        "--tsProbeLocations",
        "",
        "--ngProbeLocations",
        ""
      ],
      "filetype": [
        "typescript",
        "html",
        "typescriptreact",
        "typescript.tsx",
        "htmlangular"
      ],
      "name": "angularls",
      "path": "ngserver"
    }

ANSIBLELS ~
Usage: >
    call lsp_settings#Ansiblels()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "yaml.ansible"
      ],
      "name": "ansiblels",
      "path": "ansible-language-server",
      "workspaceConfig": {
        "settings": {
          "ansible": {
            "ansible": {
              "path": "ansible"
            },
            "executionEnvironment": {
              "enabled": false
            },
            "python": {
              "interpreterPath": "python"
            },
            "validation": {
              "enabled": true,
              "lint": {
                "enabled": true,
                "path": "ansible-lint"
              }
            }
          }
        }
      }
    }

ANTLERSLS ~
Usage: >
    call lsp_settings#Antlersls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "html",
        "antlers"
      ],
      "name": "antlersls",
      "path": "antlersls"
    }

APEX LS ~
Usage: >
    call lsp_settings#ApexLs()
<
Defaults: >
    {
      "filetype": [
        "apexcode"
      ],
      "name": "apex_ls"
    }

ARDUINO LANGUAGE SERVER ~
Usage: >
    call lsp_settings#ArduinoLanguageServer()
<
Defaults: >
    {
      "args": [],
      "features": {
        "textDocument": {
          "semanticTokens": null
        },
        "workspace": {
          "semanticTokens": null
        }
      },
      "filetype": [
        "arduino"
      ],
      "name": "arduino_language_server",
      "path": "arduino-language-server"
    }

ASM LSP ~
Usage: >
    call lsp_settings#AsmLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "asm",
        "vmasm"
      ],
      "name": "asm_lsp",
      "path": "asm-lsp"
    }

AST GREP ~
Usage: >
    call lsp_settings#AstGrep()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "c",
        "cpp",
        "rust",
        "go",
        "java",
        "python",
        "javascript",
        "typescript",
        "html",
        "css",
        "kotlin",
        "dart",
        "lua"
      ],
      "name": "ast_grep",
      "path": "ast-grep"
    }

ASTRO ~
Usage: >
    call lsp_settings#Astro()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "astro"
      ],
      "init_options": {
        "typescript": []
      },
      "name": "astro",
      "path": "astro-ls"
    }

AUTOTOOLS LS ~
Usage: >
    call lsp_settings#AutotoolsLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "config",
        "automake",
        "make"
      ],
      "name": "autotools_ls",
      "path": "autotools-language-server"
    }

AWK LS ~
Usage: >
    call lsp_settings#AwkLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "awk"
      ],
      "name": "awk_ls",
      "path": "awk-language-server"
    }

AZURE PIPELINES LS ~
Usage: >
    call lsp_settings#AzurePipelinesLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "yaml"
      ],
      "name": "azure_pipelines_ls",
      "path": "azure-pipelines-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

BACON LS ~
Usage: >
    call lsp_settings#BaconLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "rust"
      ],
      "name": "bacon_ls",
      "path": "bacon-ls",
      "workspaceConfig": {
        "settings": []
      }
    }

BALLERINA ~
Usage: >
    call lsp_settings#Ballerina()
<
Defaults: >
    {
      "args": [
        "start-language-server"
      ],
      "filetype": [
        "ballerina"
      ],
      "name": "ballerina",
      "path": "bal"
    }

BASEDPYRIGHT ~
Usage: >
    call lsp_settings#Basedpyright()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "python"
      ],
      "name": "basedpyright",
      "path": "basedpyright-langserver",
      "workspaceConfig": {
        "settings": {
          "basedpyright": {
            "analysis": {
              "autoSearchPaths": true,
              "diagnosticMode": "openFilesOnly",
              "useLibraryCodeForTypes": true
            }
          }
        }
      }
    }

BASHLS ~
Usage: >
    call lsp_settings#Bashls()
<
Defaults: >
    {
      "args": [
        "start"
      ],
      "filetype": [
        "sh"
      ],
      "name": "bashls",
      "path": "bash-language-server",
      "workspaceConfig": {
        "settings": {
          "bashIde": {
            "globPattern": "*@(.sh|.inc|.bash|.command)"
          }
        }
      }
    }

BASICS LS ~
Usage: >
    call lsp_settings#BasicsLs()
<
Defaults: >
    {
      "args": [],
      "name": "basics_ls",
      "path": "basics-language-server",
      "workspaceConfig": {
        "settings": {
          "buffer": {
            "enable": true,
            "minCompletionLength": 4
          },
          "path": {
            "enable": true
          },
          "snippet": {
            "enable": false,
            "sources": []
          }
        }
      }
    }

BAZELRC LSP ~
Usage: >
    call lsp_settings#BazelrcLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "bazelrc"
      ],
      "name": "bazelrc_lsp",
      "path": "bazelrc-lsp"
    }

BEANCOUNT ~
Usage: >
    call lsp_settings#Beancount()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "beancount",
        "bean"
      ],
      "init_options": [],
      "name": "beancount",
      "path": "beancount-language-server"
    }

BICEP ~
Usage: >
    call lsp_settings#Bicep()
<
Defaults: >
    {
      "filetype": [
        "bicep"
      ],
      "init_options": [],
      "name": "bicep"
    }

BIOME ~
Usage: >
    call lsp_settings#Biome()
<
Defaults: >
    {
      "args": [
        "lsp-proxy"
      ],
      "filetype": [
        "astro",
        "css",
        "graphql",
        "javascript",
        "javascriptreact",
        "json",
        "jsonc",
        "svelte",
        "typescript",
        "typescript.tsx",
        "typescriptreact",
        "vue"
      ],
      "name": "biome",
      "path": "biome"
    }

BITBAKE LANGUAGE SERVER ~
Usage: >
    call lsp_settings#BitbakeLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "bitbake"
      ],
      "name": "bitbake_language_server",
      "path": "bitbake-language-server"
    }

BITBAKE LS ~
Usage: >
    call lsp_settings#BitbakeLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "bitbake"
      ],
      "name": "bitbake_ls",
      "path": "language-server-bitbake"
    }

BLUEPRINT LS ~
Usage: >
    call lsp_settings#BlueprintLs()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "cmd_env": {
        "GLOB_PATTERN": "*@(.blp)"
      },
      "filetype": [
        "blueprint"
      ],
      "name": "blueprint_ls",
      "path": "blueprint-compiler"
    }

BQNLSP ~
Usage: >
    call lsp_settings#Bqnlsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "bqn"
      ],
      "name": "bqnlsp",
      "path": "bqnlsp"
    }

BRIGHT SCRIPT ~
Usage: >
    call lsp_settings#BrightScript()
<
Defaults: >
    {
      "args": [
        "--lsp",
        "--stdio"
      ],
      "filetype": [
        "brs"
      ],
      "name": "bright_script",
      "path": "bsc"
    }

BSL LS ~
Usage: >
    call lsp_settings#BslLs()
<
Defaults: >
    {
      "filetype": [
        "bsl",
        "os"
      ],
      "name": "bsl_ls"
    }

BUCK2 ~
Usage: >
    call lsp_settings#Buck2()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "bzl"
      ],
      "name": "buck2",
      "path": "buck2"
    }

BUDDY LS ~
Usage: >
    call lsp_settings#BuddyLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "mlir"
      ],
      "name": "buddy_ls",
      "path": "buddy-lsp-server"
    }

BUF LS ~
Usage: >
    call lsp_settings#BufLs()
<
Defaults: >
    {
      "args": [
        "beta",
        "lsp",
        "--timeout=0",
        "--log-format=text"
      ],
      "filetype": [
        "proto"
      ],
      "name": "buf_ls",
      "path": "buf"
    }

BUFLS ~
Usage: >
    call lsp_settings#Bufls()
<
Defaults: >
    {
      "args": [
        "serve"
      ],
      "filetype": [
        "proto"
      ],
      "name": "bufls",
      "path": "bufls"
    }

BZL ~
Usage: >
    call lsp_settings#Bzl()
<
Defaults: >
    {
      "args": [
        "lsp",
        "serve"
      ],
      "filetype": [
        "bzl"
      ],
      "name": "bzl",
      "path": "bzl"
    }

C3 LSP ~
Usage: >
    call lsp_settings#C3Lsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "c3",
        "c3i"
      ],
      "name": "c3_lsp",
      "path": "c3lsp"
    }

CADENCE ~
Usage: >
    call lsp_settings#Cadence()
<
Defaults: >
    {
      "args": [
        "cadence",
        "language-server"
      ],
      "filetype": [
        "cdc"
      ],
      "init_options": {
        "numberOfAccounts": "1"
      },
      "name": "cadence",
      "path": "flow"
    }

CAIRO LS ~
Usage: >
    call lsp_settings#CairoLs()
<
Defaults: >
    {
      "args": [
        "/C",
        "--node-ipc"
      ],
      "filetype": [
        "cairo"
      ],
      "init_options": {
        "hostInfo": "neovim"
      },
      "name": "cairo_ls",
      "path": "scarb-cairo-language-server"
    }

CCLS ~
Usage: >
    call lsp_settings#Ccls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "c",
        "cpp",
        "objc",
        "objcpp",
        "cuda"
      ],
      "name": "ccls",
      "offset_encoding": "utf-32",
      "path": "ccls"
    }

CDS LSP ~
Usage: >
    call lsp_settings#CdsLsp()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "cds"
      ],
      "name": "cds_lsp",
      "path": "cds-lsp",
      "workspaceConfig": {
        "settings": {
          "cds": {
            "validate": true
          }
        }
      }
    }

CIRCOM LSP ~
Usage: >
    call lsp_settings#CircomLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "circom"
      ],
      "name": "circom-lsp",
      "path": "circom-lsp"
    }

CLANGD ~
Usage: >
    call lsp_settings#Clangd()
<
Defaults: >
    {
      "args": [],
      "features": {
        "offsetEncoding": [
          "utf-8",
          "utf-16"
        ],
        "textDocument": {
          "completion": {
            "editsNearCursor": true
          }
        }
      },
      "filetype": [
        "c",
        "cpp",
        "objc",
        "objcpp",
        "cuda",
        "proto"
      ],
      "name": "clangd",
      "path": "clangd"
    }

CLARITY LSP ~
Usage: >
    call lsp_settings#ClarityLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "clar",
        "clarity"
      ],
      "name": "clarity_lsp",
      "path": "clarity-lsp"
    }

CLOJURE LSP ~
Usage: >
    call lsp_settings#ClojureLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "clojure",
        "edn"
      ],
      "name": "clojure_lsp",
      "path": "clojure-lsp"
    }

CMAKE ~
Usage: >
    call lsp_settings#Cmake()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "cmake"
      ],
      "init_options": {
        "buildDirectory": "build"
      },
      "name": "cmake",
      "path": "cmake-language-server"
    }

COBOL LS ~
Usage: >
    call lsp_settings#CobolLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "cobol"
      ],
      "name": "cobol_ls",
      "path": "cobol-language-support"
    }

CODEQLLS ~
Usage: >
    call lsp_settings#Codeqlls()
<
Defaults: >
    {
      "args": [
        "execute",
        "language-server",
        "--check-errors",
        "ON_CHANGE",
        "-q"
      ],
      "filetype": [
        "ql"
      ],
      "log_level": 2,
      "name": "codeqlls",
      "path": "codeql",
      "workspaceConfig": {
        "settings": {
          "search_path": {}
        }
      }
    }

COFFEESENSE ~
Usage: >
    call lsp_settings#Coffeesense()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "coffee"
      ],
      "name": "coffeesense",
      "path": "coffeesense-language-server"
    }

CONTEXTIVE ~
Usage: >
    call lsp_settings#Contextive()
<
Defaults: >
    {
      "args": [],
      "name": "contextive",
      "path": "Contextive.LanguageServer"
    }

COQ LSP ~
Usage: >
    call lsp_settings#CoqLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "coq"
      ],
      "name": "coq_lsp",
      "path": "coq-lsp"
    }

CRYSTALLINE ~
Usage: >
    call lsp_settings#Crystalline()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "crystal"
      ],
      "name": "crystalline",
      "path": "crystalline"
    }

CSHARP LS ~
Usage: >
    call lsp_settings#CsharpLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "cs"
      ],
      "init_options": {
        "AutomaticWorkspaceInit": true
      },
      "name": "csharp_ls",
      "path": "csharp-ls"
    }

CSS VARIABLES ~
Usage: >
    call lsp_settings#CssVariables()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "css",
        "scss",
        "less"
      ],
      "name": "css_variables",
      "path": "css-variables-language-server",
      "workspaceConfig": {
        "settings": {
          "cssVariables": {
            "blacklistFolders": [
              "**/.cache",
              "**/.DS_Store",
              "**/.git",
              "**/.hg",
              "**/.next",
              "**/.svn",
              "**/bower_components",
              "**/CVS",
              "**/dist",
              "**/node_modules",
              "**/tests",
              "**/tmp"
            ],
            "lookupFiles": [
              "**/*.less",
              "**/*.scss",
              "**/*.sass",
              "**/*.css"
            ]
          }
        }
      }
    }

CSSLS ~
Usage: >
    call lsp_settings#Cssls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "css",
        "scss",
        "less"
      ],
      "init_options": {
        "provideFormatter": true
      },
      "name": "cssls",
      "path": "vscode-css-language-server",
      "workspaceConfig": {
        "settings": {
          "css": {
            "validate": true
          },
          "less": {
            "validate": true
          },
          "scss": {
            "validate": true
          }
        }
      }
    }

CSSMODULES LS ~
Usage: >
    call lsp_settings#CssmodulesLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact"
      ],
      "name": "cssmodules_ls",
      "path": "cssmodules-language-server"
    }

CUCUMBER LANGUAGE SERVER ~
Usage: >
    call lsp_settings#CucumberLanguageServer()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "cucumber"
      ],
      "name": "cucumber_language_server",
      "path": "cucumber-language-server"
    }

CUSTOM ELEMENTS LS ~
Usage: >
    call lsp_settings#CustomElementsLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "init_options": {
        "hostInfo": "neovim"
      },
      "name": "custom_elements_ls",
      "path": "custom-elements-languageserver"
    }

CYPHER LS ~
Usage: >
    call lsp_settings#CypherLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "cypher"
      ],
      "name": "cypher_ls",
      "path": "cypher-language-server"
    }

DAEDALUS LS ~
Usage: >
    call lsp_settings#DaedalusLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "d"
      ],
      "name": "daedalus_ls",
      "path": "DaedalusLanguageServer",
      "workspaceConfig": {
        "settings": {
          "DaedalusLanguageServer": {
            "fileEncoding": "Windows-1252",
            "inlayHints": {
              "constants": true
            },
            "loglevel": "debug",
            "numParserThreads": 16,
            "srcFileEncoding": "Windows-1252"
          }
        }
      }
    }

DAFNY ~
Usage: >
    call lsp_settings#Dafny()
<
Defaults: >
    {
      "args": [
        "server"
      ],
      "filetype": [
        "dfy",
        "dafny"
      ],
      "name": "dafny",
      "path": "dafny"
    }

DAGGER ~
Usage: >
    call lsp_settings#Dagger()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "cue"
      ],
      "name": "dagger",
      "path": "cuelsp"
    }

DARTLS ~
Usage: >
    call lsp_settings#Dartls()
<
Defaults: >
    {
      "args": [
        "language-server",
        "--protocol=lsp"
      ],
      "filetype": [
        "dart"
      ],
      "init_options": {
        "closingLabels": true,
        "flutterOutline": true,
        "onlyAnalyzeProjectsWithOpenFiles": true,
        "outline": true,
        "suggestFromUnimportedLibraries": true
      },
      "name": "dartls",
      "path": "dart",
      "workspaceConfig": {
        "settings": {
          "dart": {
            "completeFunctionCalls": true,
            "showTodos": true
          }
        }
      }
    }

DCMLS ~
Usage: >
    call lsp_settings#Dcmls()
<
Defaults: >
    {
      "args": [
        "start-server",
        "--client=neovim"
      ],
      "filetype": [
        "dart"
      ],
      "name": "dcmls",
      "path": "dcm"
    }

DEBPUTY ~
Usage: >
    call lsp_settings#Debputy()
<
Defaults: >
    {
      "args": [
        "lsp",
        "server"
      ],
      "filetype": [
        "debcontrol",
        "debcopyright",
        "debchangelog",
        "make",
        "yaml"
      ],
      "name": "debputy",
      "path": "debputy"
    }

DELPHI LS ~
Usage: >
    call lsp_settings#DelphiLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "pascal"
      ],
      "name": "delphi_ls",
      "path": "DelphiLSP.exe"
    }

DENOLS ~
Usage: >
    call lsp_settings#Denols()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "cmd_env": {
        "NO_COLOR": true
      },
      "filetype": [
        "javascript",
        "javascriptreact",
        "javascript.jsx",
        "typescript",
        "typescriptreact",
        "typescript.tsx"
      ],
      "handlers": [],
      "name": "denols",
      "path": "deno",
      "workspaceConfig": {
        "settings": {
          "deno": {
            "enable": true,
            "suggest": {
              "imports": {
                "hosts": {
                  "https://deno.land": true
                }
              }
            }
          }
        }
      }
    }

DHALL LSP SERVER ~
Usage: >
    call lsp_settings#DhallLspServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "dhall"
      ],
      "name": "dhall_lsp_server",
      "path": "dhall-lsp-server"
    }

DIAGNOSTICLS ~
Usage: >
    call lsp_settings#Diagnosticls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [],
      "name": "diagnosticls",
      "path": "diagnostic-languageserver"
    }

DIGESTIF ~
Usage: >
    call lsp_settings#Digestif()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "tex",
        "plaintex",
        "context"
      ],
      "name": "digestif",
      "path": "digestif"
    }

DJLSP ~
Usage: >
    call lsp_settings#Djlsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "html",
        "htmldjango"
      ],
      "name": "djlsp",
      "path": "djlsp",
      "workspaceConfig": {
        "settings": []
      }
    }

DOCKER COMPOSE LANGUAGE SERVICE ~
Usage: >
    call lsp_settings#DockerComposeLanguageService()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "yaml.docker-compose"
      ],
      "name": "docker_compose_language_service",
      "path": "docker-compose-langserver"
    }

DOCKERLS ~
Usage: >
    call lsp_settings#Dockerls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "dockerfile"
      ],
      "name": "dockerls",
      "path": "docker-langserver"
    }

DOLMENLS ~
Usage: >
    call lsp_settings#Dolmenls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "smt2",
        "tptp",
        "p",
        "cnf",
        "icnf",
        "zf"
      ],
      "name": "dolmenls",
      "path": "dolmenls"
    }

DOTLS ~
Usage: >
    call lsp_settings#Dotls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "dot"
      ],
      "name": "dotls",
      "path": "dot-language-server"
    }

DPRINT ~
Usage: >
    call lsp_settings#Dprint()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "javascript",
        "javascriptreact",
        "typescript",
        "typescriptreact",
        "json",
        "jsonc",
        "markdown",
        "python",
        "toml",
        "rust",
        "roslyn",
        "graphql"
      ],
      "name": "dprint",
      "path": "dprint",
      "workspaceConfig": {
        "settings": []
      }
    }

DROOLS LSP ~
Usage: >
    call lsp_settings#DroolsLsp()
<
Defaults: >
    {
      "filetype": [
        "drools"
      ],
      "name": "drools_lsp"
    }

DS PINYIN LSP ~
Usage: >
    call lsp_settings#DsPinyinLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "markdown",
        "org"
      ],
      "init_options": {
        "completion_on": true,
        "match_as_same_as_input": true,
        "match_long_input": true,
        "max_suggest": 15,
        "show_symbols": true,
        "show_symbols_by_n_times": 0,
        "show_symbols_only_follow_by_hanzi": false
      },
      "name": "ds_pinyin_lsp",
      "path": "ds-pinyin-lsp"
    }

EARTHLYLS ~
Usage: >
    call lsp_settings#Earthlyls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "earthfile"
      ],
      "name": "earthlyls",
      "path": "earthlyls"
    }

ECSACT ~
Usage: >
    call lsp_settings#Ecsact()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "ecsact"
      ],
      "name": "ecsact",
      "path": "ecsact_lsp_server"
    }

EFM ~
Usage: >
    call lsp_settings#Efm()
<
Defaults: >
    {
      "args": [],
      "name": "efm",
      "path": "efm-langserver"
    }

ELIXIRLS ~
Usage: >
    call lsp_settings#Elixirls()
<
Defaults: >
    {
      "filetype": [
        "elixir",
        "eelixir",
        "heex",
        "surface"
      ],
      "name": "elixirls"
    }

ELMLS ~
Usage: >
    call lsp_settings#Elmls()
<
Defaults: >
    {
      "args": [],
      "features": {
        "offsetEncoding": [
          "utf-8",
          "utf-16"
        ]
      },
      "filetype": [
        "elm"
      ],
      "init_options": {
        "disableElmLSDiagnostics": false,
        "elmReviewDiagnostics": "off",
        "onlyUpdateDiagnosticsOnSave": false,
        "skipInstallPackageConfirmation": false
      },
      "name": "elmls",
      "path": "elm-language-server"
    }

ELP ~
Usage: >
    call lsp_settings#Elp()
<
Defaults: >
    {
      "args": [
        "server"
      ],
      "filetype": [
        "erlang"
      ],
      "name": "elp",
      "path": "elp"
    }

EMBER ~
Usage: >
    call lsp_settings#Ember()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "handlebars",
        "typescript",
        "javascript",
        "typescript.glimmer",
        "javascript.glimmer"
      ],
      "name": "ember",
      "path": "ember-language-server"
    }

EMMET LANGUAGE SERVER ~
Usage: >
    call lsp_settings#EmmetLanguageServer()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "css",
        "eruby",
        "html",
        "htmldjango",
        "javascriptreact",
        "less",
        "pug",
        "sass",
        "scss",
        "typescriptreact",
        "htmlangular"
      ],
      "name": "emmet_language_server",
      "path": "emmet-language-server"
    }

EMMET LS ~
Usage: >
    call lsp_settings#EmmetLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "astro",
        "css",
        "eruby",
        "html",
        "htmldjango",
        "javascriptreact",
        "less",
        "pug",
        "sass",
        "scss",
        "svelte",
        "typescriptreact",
        "vue",
        "htmlangular"
      ],
      "name": "emmet_ls",
      "path": "emmet-ls"
    }

ERG LANGUAGE SERVER ~
Usage: >
    call lsp_settings#ErgLanguageServer()
<
Defaults: >
    {
      "args": [
        "--language-server"
      ],
      "filetype": [
        "erg"
      ],
      "name": "erg_language_server",
      "path": "erg"
    }

ERLANGLS ~
Usage: >
    call lsp_settings#Erlangls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "erlang"
      ],
      "name": "erlangls",
      "path": "erlang_ls"
    }

ESBONIO ~
Usage: >
    call lsp_settings#Esbonio()
<
Defaults: >
    {
      "args": [
        "-m",
        "esbonio"
      ],
      "filetype": [
        "rst"
      ],
      "name": "esbonio",
      "path": "python3"
    }

ESLINT ~
Usage: >
    call lsp_settings#Eslint()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "javascript",
        "javascriptreact",
        "javascript.jsx",
        "typescript",
        "typescriptreact",
        "typescript.tsx",
        "vue",
        "svelte",
        "astro"
      ],
      "handlers": [],
      "name": "eslint",
      "path": "vscode-eslint-language-server",
      "workspaceConfig": {
        "settings": {
          "codeAction": {
            "disableRuleComment": {
              "enable": true,
              "location": "separateLine"
            },
            "showDocumentation": {
              "enable": true
            }
          },
          "codeActionOnSave": {
            "enable": false,
            "mode": "all"
          },
          "experimental": {
            "useFlatConfig": false
          },
          "format": true,
          "nodePath": "",
          "onIgnoredFiles": "off",
          "problems": {
            "shortenToSingleLine": false
          },
          "quiet": false,
          "rulesCustomizations": [],
          "run": "onType",
          "useESLintClass": false,
          "validate": "on",
          "workingDirectory": {
            "mode": "location"
          }
        }
      }
    }

FACILITY LANGUAGE SERVER ~
Usage: >
    call lsp_settings#FacilityLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "fsd"
      ],
      "name": "facility_language_server",
      "path": "facility-language-server"
    }

FENNEL LANGUAGE SERVER ~
Usage: >
    call lsp_settings#FennelLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "fennel"
      ],
      "name": "fennel_language_server",
      "path": "fennel-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

FENNEL LS ~
Usage: >
    call lsp_settings#FennelLs()
<
Defaults: >
    {
      "args": [],
      "features": {
        "offsetEncoding": [
          "utf-8",
          "utf-16"
        ]
      },
      "filetype": [
        "fennel"
      ],
      "name": "fennel_ls",
      "path": "fennel-ls",
      "workspaceConfig": {
        "settings": []
      }
    }

FISH LSP ~
Usage: >
    call lsp_settings#FishLsp()
<
Defaults: >
    {
      "args": [
        "start"
      ],
      "cmd_env": {
        "fish_lsp_show_client_popups": false
      },
      "filetype": [
        "fish"
      ],
      "name": "fish_lsp",
      "path": "fish-lsp"
    }

FLOW ~
Usage: >
    call lsp_settings#Flow()
<
Defaults: >
    {
      "args": [
        "--no-install",
        "flow",
        "lsp"
      ],
      "filetype": [
        "javascript",
        "javascriptreact",
        "javascript.jsx"
      ],
      "name": "flow",
      "path": "npx"
    }

FLUX LSP ~
Usage: >
    call lsp_settings#FluxLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "flux"
      ],
      "name": "flux_lsp",
      "path": "flux-lsp"
    }

FOAM LS ~
Usage: >
    call lsp_settings#FoamLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "foam",
        "OpenFOAM"
      ],
      "name": "foam_ls",
      "path": "foam-ls"
    }

FORTLS ~
Usage: >
    call lsp_settings#Fortls()
<
Defaults: >
    {
      "args": [
        "--notify_init",
        "--hover_signature",
        "--hover_language=fortran",
        "--use_signature_help"
      ],
      "filetype": [
        "fortran"
      ],
      "name": "fortls",
      "path": "fortls",
      "workspaceConfig": {
        "settings": []
      }
    }

FSAUTOCOMPLETE ~
Usage: >
    call lsp_settings#Fsautocomplete()
<
Defaults: >
    {
      "args": [
        "--adaptive-lsp-server-enabled"
      ],
      "filetype": [
        "fsharp"
      ],
      "init_options": {
        "AutomaticWorkspaceInit": true
      },
      "name": "fsautocomplete",
      "path": "fsautocomplete",
      "workspaceConfig": {
        "settings": {
          "FSharp": {
            "EnableReferenceCodeLens": true,
            "ExternalAutocomplete": false,
            "InterfaceStubGeneration": true,
            "InterfaceStubGenerationMethodBody": "failwith \"Not Implemented\"",
            "InterfaceStubGenerationObjectIdentifier": "this",
            "Linter": true,
            "RecordStubGeneration": true,
            "RecordStubGenerationBody": "failwith \"Not Implemented\"",
            "ResolveNamespaces": true,
            "SimplifyNameAnalyzer": true,
            "UnionCaseStubGeneration": true,
            "UnionCaseStubGenerationBody": "failwith \"Not Implemented\"",
            "UnusedDeclarationsAnalyzer": true,
            "UnusedOpensAnalyzer": true,
            "UseSdkScripts": true,
            "keywordsAutocomplete": true
          }
        }
      }
    }

FSHARP LANGUAGE SERVER ~
Usage: >
    call lsp_settings#FsharpLanguageServer()
<
Defaults: >
    {
      "args": [
        "FSharpLanguageServer.dll"
      ],
      "filetype": [
        "fsharp"
      ],
      "init_options": {
        "AutomaticWorkspaceInit": true
      },
      "name": "fsharp_language_server",
      "path": "dotnet",
      "workspaceConfig": {
        "settings": []
      }
    }

FSTAR ~
Usage: >
    call lsp_settings#Fstar()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "fstar"
      ],
      "name": "fstar",
      "path": "fstar.exe"
    }

FUTHARK LSP ~
Usage: >
    call lsp_settings#FutharkLsp()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "futhark",
        "fut"
      ],
      "name": "futhark_lsp",
      "path": "futhark"
    }

GDSCRIPT ~
Usage: >
    call lsp_settings#Gdscript()
<
Defaults: >
    {
      "filetype": [
        "gd",
        "gdscript",
        "gdscript3"
      ],
      "name": "gdscript"
    }

GDSHADER LSP ~
Usage: >
    call lsp_settings#GdshaderLsp()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "gdshader",
        "gdshaderinc"
      ],
      "name": "gdshader_lsp",
      "path": "gdshader-lsp"
    }

GHCIDE ~
Usage: >
    call lsp_settings#Ghcide()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "haskell",
        "lhaskell"
      ],
      "name": "ghcide",
      "path": "ghcide"
    }

GHDL LS ~
Usage: >
    call lsp_settings#GhdlLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "vhdl"
      ],
      "name": "ghdl_ls",
      "path": "ghdl-ls"
    }

GINKO LS ~
Usage: >
    call lsp_settings#GinkoLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "dts"
      ],
      "name": "ginko_ls",
      "path": "ginko_ls",
      "workspaceConfig": {
        "settings": []
      }
    }

GITLAB CI LS ~
Usage: >
    call lsp_settings#GitlabCiLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "yaml.gitlab"
      ],
      "init_options": {
        "cache_path": "/home/sacca/.cache/gitlab-ci-ls/",
        "log_path": "/home/sacca/.cache/gitlab-ci-ls//log/gitlab-ci-ls.log"
      },
      "name": "gitlab_ci_ls",
      "path": "gitlab-ci-ls"
    }

GLASGOW ~
Usage: >
    call lsp_settings#Glasgow()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "wgsl"
      ],
      "name": "glasgow",
      "path": "glasgow",
      "workspaceConfig": {
        "settings": []
      }
    }

GLEAM ~
Usage: >
    call lsp_settings#Gleam()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "gleam"
      ],
      "name": "gleam",
      "path": "gleam"
    }

GLINT ~
Usage: >
    call lsp_settings#Glint()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "html.handlebars",
        "handlebars",
        "typescript",
        "typescript.glimmer",
        "javascript",
        "javascript.glimmer"
      ],
      "name": "glint",
      "path": "glint-language-server"
    }

GLSL ANALYZER ~
Usage: >
    call lsp_settings#GlslAnalyzer()
<
Defaults: >
    {
      "args": [],
      "features": [],
      "filetype": [
        "glsl",
        "vert",
        "tesc",
        "tese",
        "frag",
        "geom",
        "comp"
      ],
      "name": "glsl_analyzer",
      "path": "glsl_analyzer"
    }

GLSLLS ~
Usage: >
    call lsp_settings#Glslls()
<
Defaults: >
    {
      "args": [
        "--stdin"
      ],
      "features": {
        "offsetEncoding": [
          "utf-8",
          "utf-16"
        ],
        "textDocument": {
          "completion": {
            "editsNearCursor": true
          }
        }
      },
      "filetype": [
        "glsl",
        "vert",
        "tesc",
        "tese",
        "frag",
        "geom",
        "comp"
      ],
      "name": "glslls",
      "path": "glslls"
    }

GOLANGCI LINT LS ~
Usage: >
    call lsp_settings#GolangciLintLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "go",
        "gomod"
      ],
      "init_options": {
        "command": [
          "golangci-lint",
          "run",
          "--out-format",
          "json"
        ]
      },
      "name": "golangci_lint_ls",
      "path": "golangci-lint-langserver"
    }

GOPLS ~
Usage: >
    call lsp_settings#Gopls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "go",
        "gomod",
        "gowork",
        "gotmpl"
      ],
      "name": "gopls",
      "path": "gopls"
    }

GRADLE LS ~
Usage: >
    call lsp_settings#GradleLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "groovy"
      ],
      "init_options": {
        "settings": {
          "gradleWrapperEnabled": true
        }
      },
      "name": "gradle_ls",
      "path": "gradle-language-server"
    }

GRAMMARLY ~
Usage: >
    call lsp_settings#Grammarly()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "markdown"
      ],
      "handlers": [],
      "init_options": {
        "clientId": "client_BaDkMgx4X19X9UxxYRCXZo"
      },
      "name": "grammarly",
      "path": "grammarly-languageserver"
    }

GRAPHQL ~
Usage: >
    call lsp_settings#Graphql()
<
Defaults: >
    {
      "args": [
        "server",
        "-m",
        "stream"
      ],
      "filetype": [
        "graphql",
        "typescriptreact",
        "javascriptreact"
      ],
      "name": "graphql",
      "path": "graphql-lsp"
    }

GROOVYLS ~
Usage: >
    call lsp_settings#Groovyls()
<
Defaults: >
    {
      "args": [
        "-jar",
        "groovy-language-server-all.jar"
      ],
      "filetype": [
        "groovy"
      ],
      "name": "groovyls",
      "path": "java"
    }

GUILE LS ~
Usage: >
    call lsp_settings#GuileLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "scheme.guile"
      ],
      "name": "guile_ls",
      "path": "guile-lsp-server"
    }

HARPER LS ~
Usage: >
    call lsp_settings#HarperLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "c",
        "cpp",
        "cs",
        "gitcommit",
        "go",
        "html",
        "java",
        "javascript",
        "lua",
        "markdown",
        "nix",
        "python",
        "ruby",
        "rust",
        "swift",
        "toml",
        "typescript",
        "typescriptreact"
      ],
      "name": "harper_ls",
      "path": "harper-ls"
    }

HAXE LANGUAGE SERVER ~
Usage: >
    call lsp_settings#HaxeLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "haxe"
      ],
      "init_options": [],
      "name": "haxe_language_server",
      "path": "haxe-language-server",
      "workspaceConfig": {
        "settings": {
          "haxe": {
            "executable": "haxe"
          }
        }
      }
    }

HDL CHECKER ~
Usage: >
    call lsp_settings#HdlChecker()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "vhdl",
        "verilog",
        "systemverilog"
      ],
      "name": "hdl_checker",
      "path": "hdl_checker"
    }

HELM LS ~
Usage: >
    call lsp_settings#HelmLs()
<
Defaults: >
    {
      "args": [
        "serve"
      ],
      "features": {
        "workspace": {
          "didChangeWatchedFiles": {
            "dynamicRegistration": true
          }
        }
      },
      "filetype": [
        "helm"
      ],
      "name": "helm_ls",
      "path": "helm_ls"
    }

HHVM ~
Usage: >
    call lsp_settings#Hhvm()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "php",
        "hack"
      ],
      "name": "hhvm",
      "path": "hh_client"
    }

HIE ~
Usage: >
    call lsp_settings#Hie()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "haskell"
      ],
      "name": "hie",
      "path": "hie-wrapper"
    }

HLASM ~
Usage: >
    call lsp_settings#Hlasm()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "hlasm"
      ],
      "name": "hlasm",
      "path": "hlasm_language_server"
    }

HLS ~
Usage: >
    call lsp_settings#Hls()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "haskell",
        "lhaskell"
      ],
      "name": "hls",
      "path": "haskell-language-server-wrapper",
      "workspaceConfig": {
        "settings": {
          "haskell": {
            "cabalFormattingProvider": "cabalfmt",
            "formattingProvider": "ormolu"
          }
        }
      }
    }

HOON LS ~
Usage: >
    call lsp_settings#HoonLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "hoon"
      ],
      "name": "hoon_ls",
      "path": "hoon-language-server"
    }

HTML ~
Usage: >
    call lsp_settings#Html()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "html",
        "templ"
      ],
      "init_options": {
        "configurationSection": [
          "html",
          "css",
          "javascript"
        ],
        "embeddedLanguages": {
          "css": true,
          "javascript": true
        },
        "provideFormatter": true
      },
      "name": "html",
      "path": "vscode-html-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

HTMX ~
Usage: >
    call lsp_settings#Htmx()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "aspnetcorerazor",
        "astro",
        "astro-markdown",
        "blade",
        "clojure",
        "django-html",
        "htmldjango",
        "edge",
        "eelixir",
        "elixir",
        "ejs",
        "erb",
        "eruby",
        "gohtml",
        "gohtmltmpl",
        "haml",
        "handlebars",
        "hbs",
        "html",
        "htmlangular",
        "html-eex",
        "heex",
        "jade",
        "leaf",
        "liquid",
        "markdown",
        "mdx",
        "mustache",
        "njk",
        "nunjucks",
        "php",
        "razor",
        "slim",
        "twig",
        "javascript",
        "javascriptreact",
        "reason",
        "rescript",
        "typescript",
        "typescriptreact",
        "vue",
        "svelte",
        "templ"
      ],
      "name": "htmx",
      "path": "htmx-lsp"
    }

HYDRA LSP ~
Usage: >
    call lsp_settings#HydraLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "yaml"
      ],
      "name": "hydra_lsp",
      "path": "hydra-lsp"
    }

HYPRLS ~
Usage: >
    call lsp_settings#Hyprls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "hyprlang"
      ],
      "name": "hyprls",
      "path": "hyprls"
    }

IDRIS2 LSP ~
Usage: >
    call lsp_settings#Idris2Lsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "idris2"
      ],
      "name": "idris2_lsp",
      "path": "idris2-lsp"
    }

INTELEPHENSE ~
Usage: >
    call lsp_settings#Intelephense()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "php"
      ],
      "name": "intelephense",
      "path": "intelephense"
    }

JANET LSP ~
Usage: >
    call lsp_settings#JanetLsp()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "janet"
      ],
      "name": "janet_lsp",
      "path": "janet-lsp"
    }

JAVA LANGUAGE SERVER ~
Usage: >
    call lsp_settings#JavaLanguageServer()
<
Defaults: >
    {
      "filetype": [
        "java"
      ],
      "name": "java_language_server",
      "workspaceConfig": {
        "settings": []
      }
    }

JDTLS ~
Usage: >
    call lsp_settings#Jdtls()
<
Defaults: >
    {
      "args": [
        "-configuration",
        "/home/sacca/.cache/jdtls/config",
        "-data",
        "/home/sacca/.cache/jdtls/workspace"
      ],
      "filetype": [
        "java"
      ],
      "handlers": [],
      "init_options": {
        "jvm_args": [],
        "workspace": "/home/sacca/.cache/jdtls/workspace"
      },
      "name": "jdtls",
      "path": "jdtls"
    }

JEDI LANGUAGE SERVER ~
Usage: >
    call lsp_settings#JediLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "python"
      ],
      "name": "jedi_language_server",
      "path": "jedi-language-server"
    }

JINJA LSP ~
Usage: >
    call lsp_settings#JinjaLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "jinja"
      ],
      "name": "jinja_lsp",
      "path": "jinja-lsp"
    }

JQLS ~
Usage: >
    call lsp_settings#Jqls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "jq"
      ],
      "name": "jqls",
      "path": "jq-lsp"
    }

JSONLS ~
Usage: >
    call lsp_settings#Jsonls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "json",
        "jsonc"
      ],
      "init_options": {
        "provideFormatter": true
      },
      "name": "jsonls",
      "path": "vscode-json-language-server"
    }

JSONNET LS ~
Usage: >
    call lsp_settings#JsonnetLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "jsonnet",
        "libsonnet"
      ],
      "name": "jsonnet_ls",
      "path": "jsonnet-language-server"
    }

JULIALS ~
Usage: >
    call lsp_settings#Julials()
<
Defaults: >
    {
      "args": [
        "--startup-file=no",
        "--history-file=no",
        "-e",
        "    # Load LanguageServer.jl: attempt to load from ~/.julia/environments/nvim-lspconfig\n    # with the regular load path as a fallback\n    ls_install_path = joinpath(\n        get(DEPOT_PATH, 1, joinpath(homedir(), \".julia\")),\n        \"environments\", \"nvim-lspconfig\"\n    )\n    pushfirst!(LOAD_PATH, ls_install_path)\n    using LanguageServer\n    popfirst!(LOAD_PATH)\n    depot_path = get(ENV, \"JULIA_DEPOT_PATH\", \"\")\n    project_path = let\n        dirname(something(\n            ## 1. Finds an explicitly set project (JULIA_PROJECT)\n            Base.load_path_expand((\n                p = get(ENV, \"JULIA_PROJECT\", nothing);\n                p === nothing ? nothing : isempty(p) ? nothing : p\n            )),\n            ## 2. Look for a Project.toml file in the current working directory,\n            ##    or parent directories, with $HOME as an upper boundary\n            Base.current_project(),\n            ## 3. First entry in the load path\n            get(Base.load_path(), 1, nothing),\n            ## 4. Fallback to default global environment,\n            ##    this is more or less unreachable\n            Base.load_path_expand(\"@v#.#\"),\n        ))\n    end\n    @info \"Running language server\" VERSION pwd() project_path depot_path\n    server = LanguageServer.LanguageServerInstance(stdin, stdout, project_path, depot_path)\n    server.runlinter = true\n    run(server)\n  "
      ],
      "filetype": [
        "julia"
      ],
      "name": "julials",
      "path": "julia"
    }

KCL ~
Usage: >
    call lsp_settings#Kcl()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "kcl"
      ],
      "name": "kcl",
      "path": "kcl-language-server"
    }

KOKA ~
Usage: >
    call lsp_settings#Koka()
<
Defaults: >
    {
      "args": [
        "--language-server",
        "--lsstdio"
      ],
      "filetype": [
        "koka"
      ],
      "name": "koka",
      "path": "koka"
    }

KOTLIN LANGUAGE SERVER ~
Usage: >
    call lsp_settings#KotlinLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "kotlin"
      ],
      "init_options": [],
      "name": "kotlin_language_server",
      "path": "kotlin-language-server"
    }

KULALA LS ~
Usage: >
    call lsp_settings#KulalaLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "http"
      ],
      "name": "kulala_ls",
      "path": "kulala-ls"
    }

LEAN3LS ~
Usage: >
    call lsp_settings#Lean3Ls()
<
Defaults: >
    {
      "args": [
        "--stdio",
        "--",
        "-M",
        "4096",
        "-T",
        "100000"
      ],
      "filetype": [
        "lean3"
      ],
      "name": "lean3ls",
      "offset_encoding": "utf-32",
      "path": "lean-language-server"
    }

LEANLS ~
Usage: >
    call lsp_settings#Leanls()
<
Defaults: >
    {
      "args": [
        "serve",
        "--"
      ],
      "filetype": [
        "lean"
      ],
      "name": "leanls",
      "path": "lake"
    }

LELWEL LS ~
Usage: >
    call lsp_settings#LelwelLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "llw"
      ],
      "name": "lelwel_ls",
      "path": "lelwel-ls"
    }

LEMMINX ~
Usage: >
    call lsp_settings#Lemminx()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "xml",
        "xsd",
        "xsl",
        "xslt",
        "svg"
      ],
      "name": "lemminx",
      "path": "lemminx"
    }

LEXICAL ~
Usage: >
    call lsp_settings#Lexical()
<
Defaults: >
    {
      "filetype": [
        "elixir",
        "eelixir",
        "heex",
        "surface"
      ],
      "name": "lexical"
    }

LSP AI ~
Usage: >
    call lsp_settings#LspAi()
<
Defaults: >
    {
      "args": [],
      "filetype": [],
      "init_options": {
        "memory": {
          "file_store": {}
        },
        "models": {}
      },
      "name": "lsp_ai",
      "path": "lsp-ai"
    }

LTEX ~
Usage: >
    call lsp_settings#Ltex()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "bib",
        "gitcommit",
        "markdown",
        "org",
        "plaintex",
        "rst",
        "rnoweb",
        "tex",
        "pandoc",
        "quarto",
        "rmd",
        "context",
        "html",
        "xhtml",
        "mail",
        "text"
      ],
      "name": "ltex",
      "path": "ltex-ls",
      "workspaceConfig": {
        "settings": {
          "ltex": {
            "enabled": [
              "bibtex",
              "gitcommit",
              "markdown",
              "org",
              "tex",
              "restructuredtext",
              "rsweave",
              "latex",
              "quarto",
              "rmd",
              "context",
              "html",
              "xhtml",
              "mail",
              "plaintext"
            ]
          }
        }
      }
    }

LUA LS ~
Usage: >
    call lsp_settings#LuaLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "lua"
      ],
      "log_level": 2,
      "name": "lua_ls",
      "path": "lua-language-server"
    }

LUAU LSP ~
Usage: >
    call lsp_settings#LuauLsp()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "luau"
      ],
      "name": "luau_lsp",
      "path": "luau-lsp"
    }

LWC LS ~
Usage: >
    call lsp_settings#LwcLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "javascript",
        "html"
      ],
      "init_options": {
        "embeddedLanguages": {
          "javascript": true
        }
      },
      "name": "lwc_ls",
      "path": "lwc-language-server"
    }

M68K ~
Usage: >
    call lsp_settings#M68K()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "asm68k"
      ],
      "name": "m68k",
      "path": "m68k-lsp-server"
    }

MARKDOWN OXIDE ~
Usage: >
    call lsp_settings#MarkdownOxide()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "markdown"
      ],
      "name": "markdown_oxide",
      "path": "markdown-oxide"
    }

MARKO JS ~
Usage: >
    call lsp_settings#MarkoJs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "marko"
      ],
      "name": "marko-js",
      "path": "marko-language-server"
    }

MARKSMAN ~
Usage: >
    call lsp_settings#Marksman()
<
Defaults: >
    {
      "args": [
        "server"
      ],
      "filetype": [
        "markdown",
        "markdown.mdx"
      ],
      "name": "marksman",
      "path": "marksman"
    }

MATLAB LS ~
Usage: >
    call lsp_settings#MatlabLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "matlab"
      ],
      "name": "matlab_ls",
      "path": "matlab-language-server",
      "workspaceConfig": {
        "settings": {
          "MATLAB": {
            "indexWorkspace": false,
            "installPath": "",
            "matlabConnectionTiming": "onStart",
            "telemetry": true
          }
        }
      }
    }

MDX ANALYZER ~
Usage: >
    call lsp_settings#MdxAnalyzer()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "markdown.mdx"
      ],
      "init_options": {
        "typescript": []
      },
      "name": "mdx_analyzer",
      "path": "mdx-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

MESONLSP ~
Usage: >
    call lsp_settings#Mesonlsp()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "meson"
      ],
      "name": "mesonlsp",
      "path": "mesonlsp"
    }

METALS ~
Usage: >
    call lsp_settings#Metals()
<
Defaults: >
    {
      "args": [],
      "features": {
        "workspace": {
          "configuration": false
        }
      },
      "filetype": [
        "scala"
      ],
      "init_options": {
        "compilerOptions": {
          "snippetAutoIndent": false
        },
        "isHttpEnabled": true,
        "statusBarProvider": "show-message"
      },
      "message_level": 4,
      "name": "metals",
      "path": "metals"
    }

MILLET ~
Usage: >
    call lsp_settings#Millet()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "sml"
      ],
      "name": "millet",
      "path": "millet"
    }

MINT ~
Usage: >
    call lsp_settings#Mint()
<
Defaults: >
    {
      "args": [
        "ls"
      ],
      "filetype": [
        "mint"
      ],
      "name": "mint",
      "path": "mint"
    }

MLIR LSP SERVER ~
Usage: >
    call lsp_settings#MlirLspServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "mlir"
      ],
      "name": "mlir_lsp_server",
      "path": "mlir-lsp-server"
    }

MLIR PDLL LSP SERVER ~
Usage: >
    call lsp_settings#MlirPdllLspServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "pdll"
      ],
      "name": "mlir_pdll_lsp_server",
      "path": "mlir-pdll-lsp-server"
    }

MM0 LS ~
Usage: >
    call lsp_settings#Mm0Ls()
<
Defaults: >
    {
      "args": [
        "server"
      ],
      "filetype": [
        "metamath-zero"
      ],
      "name": "mm0_ls",
      "path": "mm0-rs"
    }

MOJO ~
Usage: >
    call lsp_settings#Mojo()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "mojo"
      ],
      "name": "mojo",
      "path": "mojo-lsp-server"
    }

MOTOKO LSP ~
Usage: >
    call lsp_settings#MotokoLsp()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "motoko"
      ],
      "init_options": {
        "formatter": "auto"
      },
      "name": "motoko_lsp",
      "path": "motoko-lsp"
    }

MOVE ANALYZER ~
Usage: >
    call lsp_settings#MoveAnalyzer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "move"
      ],
      "name": "move_analyzer",
      "path": "move-analyzer"
    }

MSBUILD PROJECT TOOLS SERVER ~
Usage: >
    call lsp_settings#MsbuildProjectToolsServer()
<
Defaults: >
    {
      "args": [
        "MSBuildProjectTools.LanguageServer.Host.dll"
      ],
      "filetype": [
        "xml.csproj",
        "xml.fsproj",
        "sln"
      ],
      "init_options": [],
      "name": "msbuild_project_tools_server",
      "path": "dotnet"
    }

MUTT LS ~
Usage: >
    call lsp_settings#MuttLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "muttrc",
        "neomuttrc"
      ],
      "name": "mutt_ls",
      "path": "mutt-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

NELUA LSP ~
Usage: >
    call lsp_settings#NeluaLsp()
<
Defaults: >
    {
      "filetype": [
        "nelua"
      ],
      "name": "nelua_lsp"
    }

NEOCMAKE ~
Usage: >
    call lsp_settings#Neocmake()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "cmake"
      ],
      "name": "neocmake",
      "path": "neocmakelsp"
    }

NEXTFLOW LS ~
Usage: >
    call lsp_settings#NextflowLs()
<
Defaults: >
    {
      "args": [
        "-jar",
        "nextflow-language-server-all.jar"
      ],
      "filetype": [
        "nextflow"
      ],
      "name": "nextflow_ls",
      "path": "java",
      "workspaceConfig": {
        "settings": {
          "nextflow": {
            "files": {
              "exclude": [
                ".git",
                ".nf-test",
                "work"
              ]
            }
          }
        }
      }
    }

NEXTLS ~
Usage: >
    call lsp_settings#Nextls()
<
Defaults: >
    {
      "filetype": [
        "elixir",
        "eelixir",
        "heex",
        "surface"
      ],
      "name": "nextls"
    }

NGINX LANGUAGE SERVER ~
Usage: >
    call lsp_settings#NginxLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "nginx"
      ],
      "name": "nginx_language_server",
      "path": "nginx-language-server"
    }

NICKEL LS ~
Usage: >
    call lsp_settings#NickelLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "ncl",
        "nickel"
      ],
      "name": "nickel_ls",
      "path": "nls"
    }

NIL LS ~
Usage: >
    call lsp_settings#NilLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "nix"
      ],
      "name": "nil_ls",
      "path": "nil"
    }

NIM LANGSERVER ~
Usage: >
    call lsp_settings#NimLangserver()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "nim"
      ],
      "name": "nim_langserver",
      "path": "nimlangserver"
    }

NIMLS ~
Usage: >
    call lsp_settings#Nimls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "nim"
      ],
      "name": "nimls",
      "path": "nimlsp"
    }

NIXD ~
Usage: >
    call lsp_settings#Nixd()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "nix"
      ],
      "name": "nixd",
      "path": "nixd"
    }

NOMAD LSP ~
Usage: >
    call lsp_settings#NomadLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "hcl.nomad",
        "nomad"
      ],
      "name": "nomad_lsp",
      "path": "nomad-lsp"
    }

NTT ~
Usage: >
    call lsp_settings#Ntt()
<
Defaults: >
    {
      "args": [
        "langserver"
      ],
      "filetype": [
        "ttcn"
      ],
      "name": "ntt",
      "path": "ntt"
    }

NUSHELL ~
Usage: >
    call lsp_settings#Nushell()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "nu"
      ],
      "name": "nushell",
      "path": "nu"
    }

NXLS ~
Usage: >
    call lsp_settings#Nxls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "json",
        "jsonc"
      ],
      "name": "nxls",
      "path": "nxls"
    }

OCAMLLS ~
Usage: >
    call lsp_settings#Ocamlls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "ocaml",
        "reason"
      ],
      "name": "ocamlls",
      "path": "ocaml-language-server"
    }

OCAMLLSP ~
Usage: >
    call lsp_settings#Ocamllsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "ocaml",
        "menhir",
        "ocamlinterface",
        "ocamllex",
        "reason",
        "dune"
      ],
      "name": "ocamllsp",
      "path": "ocamllsp"
    }

OLS ~
Usage: >
    call lsp_settings#Ols()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "odin"
      ],
      "name": "ols",
      "path": "ols"
    }

OMNISHARP ~
Usage: >
    call lsp_settings#Omnisharp()
<
Defaults: >
    {
      "filetype": [
        "cs",
        "vb"
      ],
      "init_options": [],
      "name": "omnisharp",
      "workspaceConfig": {
        "settings": {
          "FormattingOptions": {
            "EnableEditorConfigSupport": true
          },
          "MsBuild": [],
          "RoslynExtensionsOptions": [],
          "Sdk": {
            "IncludePrereleases": true
          }
        }
      }
    }

OPENCL LS ~
Usage: >
    call lsp_settings#OpenclLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "opencl"
      ],
      "name": "opencl_ls",
      "path": "opencl-language-server"
    }

OPENEDGE LS ~
Usage: >
    call lsp_settings#OpenedgeLs()
<
Defaults: >
    {
      "filetype": [
        "progress"
      ],
      "name": "openedge_ls"
    }

OPENSCAD LS ~
Usage: >
    call lsp_settings#OpenscadLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "openscad"
      ],
      "name": "openscad_ls",
      "path": "openscad-language-server"
    }

OPENSCAD LSP ~
Usage: >
    call lsp_settings#OpenscadLsp()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "openscad"
      ],
      "name": "openscad_lsp",
      "path": "openscad-lsp"
    }

PACT LS ~
Usage: >
    call lsp_settings#PactLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "pact"
      ],
      "name": "pact_ls",
      "path": "pact-lsp"
    }

PASLS ~
Usage: >
    call lsp_settings#Pasls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "pascal"
      ],
      "name": "pasls",
      "path": "pasls"
    }

PBLS ~
Usage: >
    call lsp_settings#Pbls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "proto"
      ],
      "name": "pbls",
      "path": "pbls"
    }

PERLLS ~
Usage: >
    call lsp_settings#Perlls()
<
Defaults: >
    {
      "args": [
        "-MPerl::LanguageServer",
        "-e",
        "Perl::LanguageServer::run",
        "--",
        "--port 13603",
        "--nostdio 0"
      ],
      "filetype": [
        "perl"
      ],
      "name": "perlls",
      "path": "perl",
      "workspaceConfig": {
        "settings": {
          "perl": {
            "fileFilter": [
              ".pm",
              ".pl"
            ],
            "ignoreDirs": ".git",
            "perlCmd": "perl",
            "perlInc": " "
          }
        }
      }
    }

PERLNAVIGATOR ~
Usage: >
    call lsp_settings#Perlnavigator()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "perl"
      ],
      "name": "perlnavigator",
      "path": "perlnavigator"
    }

PERLPLS ~
Usage: >
    call lsp_settings#Perlpls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "perl"
      ],
      "name": "perlpls",
      "path": "pls",
      "workspaceConfig": {
        "settings": {
          "perl": {
            "perlcritic": {
              "enabled": false
            },
            "syntax": {
              "enabled": true
            }
          }
        }
      }
    }

PEST LS ~
Usage: >
    call lsp_settings#PestLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "pest"
      ],
      "name": "pest_ls",
      "path": "pest-language-server"
    }

PHAN ~
Usage: >
    call lsp_settings#Phan()
<
Defaults: >
    {
      "args": [
        "-m",
        "json",
        "--no-color",
        "--no-progress-bar",
        "-x",
        "-u",
        "-S",
        "--language-server-on-stdin",
        "--allow-polyfill-parser"
      ],
      "filetype": [
        "php"
      ],
      "name": "phan",
      "path": "phan"
    }

PHPACTOR ~
Usage: >
    call lsp_settings#Phpactor()
<
Defaults: >
    {
      "args": [
        "language-server"
      ],
      "filetype": [
        "php"
      ],
      "name": "phpactor",
      "path": "phpactor"
    }

PICO8 LS ~
Usage: >
    call lsp_settings#Pico8Ls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "p8"
      ],
      "name": "pico8_ls",
      "path": "pico8-ls",
      "workspaceConfig": {
        "settings": []
      }
    }

PKGBUILD LANGUAGE SERVER ~
Usage: >
    call lsp_settings#PkgbuildLanguageServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "PKGBUILD"
      ],
      "name": "pkgbuild_language_server",
      "path": "pkgbuild-language-server"
    }

PLEASE ~
Usage: >
    call lsp_settings#Please()
<
Defaults: >
    {
      "args": [
        "tool",
        "lps"
      ],
      "filetype": [
        "bzl"
      ],
      "name": "please",
      "path": "plz"
    }

PORYSCRIPT PLS ~
Usage: >
    call lsp_settings#PoryscriptPls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "pory"
      ],
      "name": "poryscript_pls",
      "path": "poryscript-pls"
    }

POSTGRES LSP ~
Usage: >
    call lsp_settings#PostgresLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "sql"
      ],
      "name": "postgres_lsp",
      "path": "postgres_lsp"
    }

POWERSHELL ES ~
Usage: >
    call lsp_settings#PowershellEs()
<
Defaults: >
    {
      "filetype": [
        "ps1"
      ],
      "name": "powershell_es",
      "shell": "pwsh"
    }

PRISMALS ~
Usage: >
    call lsp_settings#Prismals()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "prisma"
      ],
      "name": "prismals",
      "path": "prisma-language-server",
      "workspaceConfig": {
        "settings": {
          "prisma": {
            "prismaFmtBinPath": ""
          }
        }
      }
    }

PROLOG LS ~
Usage: >
    call lsp_settings#PrologLs()
<
Defaults: >
    {
      "args": [
        "-g",
        "use_module(library(lsp_server)).",
        "-g",
        "lsp_server:main",
        "-t",
        "halt",
        "--",
        "stdio"
      ],
      "filetype": [
        "prolog"
      ],
      "name": "prolog_ls",
      "path": "swipl"
    }

PROSEMD LSP ~
Usage: >
    call lsp_settings#ProsemdLsp()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "markdown"
      ],
      "name": "prosemd_lsp",
      "path": "prosemd-lsp"
    }

PROTOLS ~
Usage: >
    call lsp_settings#Protols()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "proto"
      ],
      "name": "protols",
      "path": "protols"
    }

PSALM ~
Usage: >
    call lsp_settings#Psalm()
<
Defaults: >
    {
      "args": [
        "--language-server"
      ],
      "filetype": [
        "php"
      ],
      "name": "psalm",
      "path": "psalm"
    }

PUG ~
Usage: >
    call lsp_settings#Pug()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "pug"
      ],
      "name": "pug",
      "path": "pug-lsp"
    }

PUPPET ~
Usage: >
    call lsp_settings#Puppet()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "puppet"
      ],
      "name": "puppet",
      "path": "puppet-languageserver"
    }

PURESCRIPTLS ~
Usage: >
    call lsp_settings#Purescriptls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "purescript"
      ],
      "name": "purescriptls",
      "path": "purescript-language-server"
    }

PYLSP ~
Usage: >
    call lsp_settings#Pylsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "python"
      ],
      "name": "pylsp",
      "path": "pylsp"
    }

PYLYZER ~
Usage: >
    call lsp_settings#Pylyzer()
<
Defaults: >
    {
      "args": [
        "--server"
      ],
      "filetype": [
        "python"
      ],
      "name": "pylyzer",
      "path": "pylyzer",
      "workspaceConfig": {
        "settings": {
          "python": {
            "checkOnType": false,
            "diagnostics": true,
            "inlayHints": true,
            "smartCompletion": true
          }
        }
      }
    }

PYRE ~
Usage: >
    call lsp_settings#Pyre()
<
Defaults: >
    {
      "args": [
        "persistent"
      ],
      "filetype": [
        "python"
      ],
      "name": "pyre",
      "path": "pyre"
    }

PYRIGHT ~
Usage: >
    call lsp_settings#Pyright()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "python"
      ],
      "name": "pyright",
      "path": "pyright-langserver",
      "workspaceConfig": {
        "settings": {
          "python": {
            "analysis": {
              "autoSearchPaths": true,
              "diagnosticMode": "openFilesOnly",
              "useLibraryCodeForTypes": true
            }
          }
        }
      }
    }

QML LSP ~
Usage: >
    call lsp_settings#QmlLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "qmljs"
      ],
      "name": "qml_lsp",
      "path": "qml-lsp"
    }

QMLLS ~
Usage: >
    call lsp_settings#Qmlls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "qml",
        "qmljs"
      ],
      "name": "qmlls",
      "path": "qmlls"
    }

QUICK LINT JS ~
Usage: >
    call lsp_settings#QuickLintJs()
<
Defaults: >
    {
      "args": [
        "--lsp-server"
      ],
      "filetype": [
        "javascript",
        "typescript"
      ],
      "name": "quick_lint_js",
      "path": "quick-lint-js"
    }

R LANGUAGE SERVER ~
Usage: >
    call lsp_settings#RLanguageServer()
<
Defaults: >
    {
      "args": [
        "--no-echo",
        "-e",
        "languageserver::run()"
      ],
      "filetype": [
        "r",
        "rmd"
      ],
      "log_level": 2,
      "name": "r_language_server",
      "path": "R"
    }

RACKET LANGSERVER ~
Usage: >
    call lsp_settings#RacketLangserver()
<
Defaults: >
    {
      "args": [
        "--lib",
        "racket-langserver"
      ],
      "filetype": [
        "racket",
        "scheme"
      ],
      "name": "racket_langserver",
      "path": "racket"
    }

RAKU NAVIGATOR ~
Usage: >
    call lsp_settings#RakuNavigator()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "raku"
      ],
      "name": "raku_navigator"
    }

REASON LS ~
Usage: >
    call lsp_settings#ReasonLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "reason"
      ],
      "name": "reason_ls",
      "path": "reason-language-server"
    }

REGAL ~
Usage: >
    call lsp_settings#Regal()
<
Defaults: >
    {
      "args": [
        "language-server"
      ],
      "filetype": [
        "rego"
      ],
      "name": "regal",
      "path": "regal"
    }

REGOLS ~
Usage: >
    call lsp_settings#Regols()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "rego"
      ],
      "name": "regols",
      "path": "regols"
    }

RELAY LSP ~
Usage: >
    call lsp_settings#RelayLsp()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "auto_start_compiler": false,
      "filetype": [
        "javascript",
        "javascriptreact",
        "javascript.jsx",
        "typescript",
        "typescriptreact",
        "typescript.tsx"
      ],
      "handlers": [],
      "name": "relay_lsp",
      "path": "relay-compiler"
    }

REMARK LS ~
Usage: >
    call lsp_settings#RemarkLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "markdown"
      ],
      "name": "remark_ls",
      "path": "remark-language-server"
    }

RESCRIPTLS ~
Usage: >
    call lsp_settings#Rescriptls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "rescript"
      ],
      "init_options": {
        "extensionConfiguration": {
          "allowBuiltInFormatter": true,
          "askToStartBuild": false,
          "cache": {
            "projectConfig": {
              "enabled": true
            }
          },
          "codeLens": true,
          "incrementalTypechecking": {
            "acrossFiles": true,
            "enabled": true
          },
          "inlayHints": {
            "enable": true
          }
        }
      },
      "name": "rescriptls",
      "path": "rescript-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

RLS ~
Usage: >
    call lsp_settings#Rls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "rust"
      ],
      "name": "rls",
      "path": "rls"
    }

RNIX ~
Usage: >
    call lsp_settings#Rnix()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "nix"
      ],
      "init_options": [],
      "name": "rnix",
      "path": "rnix-lsp",
      "workspaceConfig": {
        "settings": []
      }
    }

ROBOTFRAMEWORK LS ~
Usage: >
    call lsp_settings#RobotframeworkLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "robot"
      ],
      "name": "robotframework_ls",
      "path": "robotframework_ls"
    }

ROC LS ~
Usage: >
    call lsp_settings#RocLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "roc"
      ],
      "name": "roc_ls",
      "path": "roc_language_server"
    }

ROME ~
Usage: >
    call lsp_settings#Rome()
<
Defaults: >
    {
      "args": [
        "lsp-proxy"
      ],
      "filetype": [
        "javascript",
        "javascriptreact",
        "json",
        "typescript",
        "typescript.tsx",
        "typescriptreact"
      ],
      "name": "rome",
      "path": "rome"
    }

RUBOCOP ~
Usage: >
    call lsp_settings#Rubocop()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "ruby"
      ],
      "name": "rubocop",
      "path": "rubocop"
    }

RUBY LSP ~
Usage: >
    call lsp_settings#RubyLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "ruby"
      ],
      "init_options": {
        "formatter": "auto"
      },
      "name": "ruby_lsp",
      "path": "ruby-lsp"
    }

RUFF ~
Usage: >
    call lsp_settings#Ruff()
<
Defaults: >
    {
      "args": [
        "server"
      ],
      "filetype": [
        "python"
      ],
      "name": "ruff",
      "path": "ruff",
      "workspaceConfig": {
        "settings": []
      }
    }

RUFF LSP ~
Usage: >
    call lsp_settings#RuffLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "python"
      ],
      "name": "ruff_lsp",
      "path": "ruff-lsp",
      "workspaceConfig": {
        "settings": []
      }
    }

RUNE LANGUAGESERVER ~
Usage: >
    call lsp_settings#RuneLanguageserver()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "rune"
      ],
      "name": "rune_languageserver",
      "path": "rune-languageserver"
    }

RUST ANALYZER ~
Usage: >
    call lsp_settings#RustAnalyzer()
<
Defaults: >
    {
      "args": [],
      "features": {
        "experimental": {
          "serverStatusNotification": true
        }
      },
      "filetype": [
        "rust"
      ],
      "name": "rust_analyzer",
      "path": "rust-analyzer",
      "syncInit": true
    }

SALT LS ~
Usage: >
    call lsp_settings#SaltLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "sls"
      ],
      "name": "salt_ls",
      "path": "salt_lsp_server"
    }

SCHEME LANGSERVER ~
Usage: >
    call lsp_settings#SchemeLangserver()
<
Defaults: >
    {
      "args": [
        "~/.scheme-langserver.log",
        "enable",
        "disable"
      ],
      "filetype": [
        "scheme"
      ],
      "name": "scheme_langserver",
      "path": "scheme-langserver"
    }

SCRY ~
Usage: >
    call lsp_settings#Scry()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "crystal"
      ],
      "name": "scry",
      "path": "scry"
    }

SERVE D ~
Usage: >
    call lsp_settings#ServeD()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "d"
      ],
      "name": "serve_d",
      "path": "serve-d"
    }

SHOPIFY THEME LS ~
Usage: >
    call lsp_settings#ShopifyThemeLs()
<
Defaults: >
    {
      "args": [
        "theme",
        "language-server"
      ],
      "filetype": [
        "liquid"
      ],
      "name": "shopify_theme_ls",
      "path": "shopify",
      "workspaceConfig": {
        "settings": []
      }
    }

SIXTYFPS ~
Usage: >
    call lsp_settings#Sixtyfps()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "sixtyfps"
      ],
      "name": "sixtyfps",
      "path": "sixtyfps-lsp"
    }

SLANGD ~
Usage: >
    call lsp_settings#Slangd()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "hlsl",
        "shaderslang"
      ],
      "name": "slangd",
      "path": "slangd"
    }

SLINT LSP ~
Usage: >
    call lsp_settings#SlintLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "slint"
      ],
      "name": "slint_lsp",
      "path": "slint-lsp"
    }

SMARTY LS ~
Usage: >
    call lsp_settings#SmartyLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "smarty"
      ],
      "init_options": [],
      "name": "smarty_ls",
      "path": "smarty-language-server",
      "workspaceConfig": {
        "settings": {
          "css": {
            "validate": true
          },
          "smarty": {
            "pluginDirs": []
          }
        }
      }
    }

SMITHY LS ~
Usage: >
    call lsp_settings#SmithyLs()
<
Defaults: >
    {
      "args": [
        "0"
      ],
      "filetype": [
        "smithy"
      ],
      "name": "smithy_ls",
      "path": "smithy-language-server"
    }

SNAKESKIN LS ~
Usage: >
    call lsp_settings#SnakeskinLs()
<
Defaults: >
    {
      "args": [
        "lsp",
        "--stdio"
      ],
      "filetype": [
        "ss"
      ],
      "name": "snakeskin_ls",
      "path": "snakeskin-cli"
    }

SNYK LS ~
Usage: >
    call lsp_settings#SnykLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "go",
        "gomod",
        "javascript",
        "typescript",
        "json",
        "python",
        "requirements",
        "helm",
        "yaml",
        "terraform",
        "terraform-vars"
      ],
      "init_options": {
        "activateSnykCode": "true"
      },
      "name": "snyk_ls",
      "path": "snyk-ls",
      "workspaceConfig": {
        "settings": []
      }
    }

SOLANG ~
Usage: >
    call lsp_settings#Solang()
<
Defaults: >
    {
      "args": [
        "language-server",
        "--target",
        "evm"
      ],
      "filetype": [
        "solidity"
      ],
      "name": "solang",
      "path": "solang"
    }

SOLARGRAPH ~
Usage: >
    call lsp_settings#Solargraph()
<
Defaults: >
    {
      "args": [
        "stdio"
      ],
      "filetype": [
        "ruby"
      ],
      "init_options": {
        "formatting": true
      },
      "name": "solargraph",
      "path": "solargraph",
      "workspaceConfig": {
        "settings": {
          "solargraph": {
            "diagnostics": true
          }
        }
      }
    }

SOLC ~
Usage: >
    call lsp_settings#Solc()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "solidity"
      ],
      "name": "solc",
      "path": "solc"
    }

SOLIDITY ~
Usage: >
    call lsp_settings#Solidity()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "solidity"
      ],
      "name": "solidity",
      "path": "solidity-ls",
      "workspaceConfig": {
        "settings": {
          "solidity": {
            "includePath": "",
            "remapping": []
          }
        }
      }
    }

SOLIDITY LS ~
Usage: >
    call lsp_settings#SolidityLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "solidity"
      ],
      "name": "solidity_ls",
      "path": "vscode-solidity-server"
    }

SOLIDITY LS NOMICFOUNDATION ~
Usage: >
    call lsp_settings#SolidityLsNomicfoundation()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "solidity"
      ],
      "name": "solidity_ls_nomicfoundation",
      "path": "nomicfoundation-solidity-language-server"
    }

SOMESASS LS ~
Usage: >
    call lsp_settings#SomesassLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "scss",
        "sass"
      ],
      "name": "somesass_ls",
      "path": "some-sass-language-server",
      "workspaceConfig": {
        "settings": {
          "somesass": {
            "suggestAllFromOpenDocument": true
          }
        }
      }
    }

SORBET ~
Usage: >
    call lsp_settings#Sorbet()
<
Defaults: >
    {
      "args": [
        "tc",
        "--lsp"
      ],
      "filetype": [
        "ruby"
      ],
      "name": "sorbet",
      "path": "srb"
    }

SOURCEKIT ~
Usage: >
    call lsp_settings#Sourcekit()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "swift",
        "objc",
        "objcpp",
        "c",
        "cpp"
      ],
      "name": "sourcekit",
      "path": "sourcekit-lsp"
    }

SOURCERY ~
Usage: >
    call lsp_settings#Sourcery()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "javascript",
        "javascriptreact",
        "python",
        "typescript",
        "typescriptreact"
      ],
      "init_options": {
        "editor_version": "vim",
        "extension_version": "vim.lsp"
      },
      "name": "sourcery",
      "path": "sourcery"
    }

SPECTRAL ~
Usage: >
    call lsp_settings#Spectral()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "yaml",
        "json",
        "yml"
      ],
      "name": "spectral",
      "path": "spectral-language-server",
      "workspaceConfig": {
        "settings": {
          "enable": true,
          "run": "onType",
          "validateLanguages": [
            "yaml",
            "json",
            "yml"
          ]
        }
      }
    }

SPYGLASSMC LANGUAGE SERVER ~
Usage: >
    call lsp_settings#SpyglassmcLanguageServer()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "mcfunction"
      ],
      "name": "spyglassmc_language_server",
      "path": "spyglassmc-language-server"
    }

SQLLS ~
Usage: >
    call lsp_settings#Sqlls()
<
Defaults: >
    {
      "args": [
        "up",
        "--method",
        "stdio"
      ],
      "filetype": [
        "sql",
        "mysql"
      ],
      "name": "sqlls",
      "path": "sql-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

SQLS ~
Usage: >
    call lsp_settings#Sqls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "sql",
        "mysql"
      ],
      "name": "sqls",
      "path": "sqls",
      "workspaceConfig": {
        "settings": []
      }
    }

STANDARDRB ~
Usage: >
    call lsp_settings#Standardrb()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "ruby"
      ],
      "name": "standardrb",
      "path": "standardrb"
    }

STARLARK RUST ~
Usage: >
    call lsp_settings#StarlarkRust()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "star",
        "bzl",
        "BUILD.bazel"
      ],
      "name": "starlark_rust",
      "path": "starlark"
    }

STARPLS ~
Usage: >
    call lsp_settings#Starpls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "bzl"
      ],
      "name": "starpls",
      "path": "starpls"
    }

STATIX ~
Usage: >
    call lsp_settings#Statix()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "nix"
      ],
      "name": "statix",
      "path": "statix"
    }

STEEP ~
Usage: >
    call lsp_settings#Steep()
<
Defaults: >
    {
      "args": [
        "langserver"
      ],
      "filetype": [
        "ruby",
        "eruby"
      ],
      "name": "steep",
      "path": "steep"
    }

STIMULUS LS ~
Usage: >
    call lsp_settings#StimulusLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "html",
        "ruby",
        "eruby",
        "blade",
        "php"
      ],
      "name": "stimulus_ls",
      "path": "stimulus-language-server"
    }

STYLELINT LSP ~
Usage: >
    call lsp_settings#StylelintLsp()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "css",
        "less",
        "scss",
        "sugarss",
        "vue",
        "wxss"
      ],
      "name": "stylelint_lsp",
      "path": "stylelint-lsp",
      "workspaceConfig": {
        "settings": []
      }
    }

SUPERHTML ~
Usage: >
    call lsp_settings#Superhtml()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "superhtml",
        "html"
      ],
      "name": "superhtml",
      "path": "superhtml"
    }

SVELTE ~
Usage: >
    call lsp_settings#Svelte()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "svelte"
      ],
      "name": "svelte",
      "path": "svelteserver"
    }

SVLANGSERVER ~
Usage: >
    call lsp_settings#Svlangserver()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "verilog",
        "systemverilog"
      ],
      "name": "svlangserver",
      "path": "svlangserver",
      "workspaceConfig": {
        "settings": {
          "systemverilog": {
            "includeIndexing": [
              "*.{v,vh,sv,svh}",
              "**/*.{v,vh,sv,svh}"
            ]
          }
        }
      }
    }

SVLS ~
Usage: >
    call lsp_settings#Svls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "verilog",
        "systemverilog"
      ],
      "name": "svls",
      "path": "svls"
    }

SWIFT MESONLS ~
Usage: >
    call lsp_settings#SwiftMesonls()
<
Defaults: >
    {
      "args": [
        "--lsp"
      ],
      "filetype": [
        "meson"
      ],
      "name": "swift_mesonls",
      "path": "Swift-MesonLSP"
    }

SYNTAX TREE ~
Usage: >
    call lsp_settings#SyntaxTree()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "ruby"
      ],
      "name": "syntax_tree",
      "path": "stree"
    }

TABBY ML ~
Usage: >
    call lsp_settings#TabbyMl()
<
Defaults: >
    {
      "args": [
        "--lsp",
        "--stdio"
      ],
      "filetype": [],
      "name": "tabby_ml",
      "path": "tabby-agent"
    }

TAILWINDCSS ~
Usage: >
    call lsp_settings#Tailwindcss()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "aspnetcorerazor",
        "astro",
        "astro-markdown",
        "blade",
        "clojure",
        "django-html",
        "htmldjango",
        "edge",
        "eelixir",
        "elixir",
        "ejs",
        "erb",
        "eruby",
        "gohtml",
        "gohtmltmpl",
        "haml",
        "handlebars",
        "hbs",
        "html",
        "htmlangular",
        "html-eex",
        "heex",
        "jade",
        "leaf",
        "liquid",
        "markdown",
        "mdx",
        "mustache",
        "njk",
        "nunjucks",
        "php",
        "razor",
        "slim",
        "twig",
        "css",
        "less",
        "postcss",
        "sass",
        "scss",
        "stylus",
        "sugarss",
        "javascript",
        "javascriptreact",
        "reason",
        "rescript",
        "typescript",
        "typescriptreact",
        "vue",
        "svelte",
        "templ"
      ],
      "name": "tailwindcss",
      "path": "tailwindcss-language-server",
      "workspaceConfig": {
        "settings": {
          "tailwindCSS": {
            "classAttributes": [
              "class",
              "className",
              "class:list",
              "classList",
              "ngClass"
            ],
            "includeLanguages": {
              "eelixir": "html-eex",
              "eruby": "erb",
              "htmlangular": "html",
              "templ": "html"
            },
            "lint": {
              "cssConflict": "warning",
              "invalidApply": "error",
              "invalidConfigPath": "error",
              "invalidScreen": "error",
              "invalidTailwindDirective": "error",
              "invalidVariant": "error",
              "recommendedVariantOrder": "warning"
            },
            "validate": true
          }
        }
      }
    }

TAPLO ~
Usage: >
    call lsp_settings#Taplo()
<
Defaults: >
    {
      "args": [
        "lsp",
        "stdio"
      ],
      "filetype": [
        "toml"
      ],
      "name": "taplo",
      "path": "taplo"
    }

TBLGEN LSP SERVER ~
Usage: >
    call lsp_settings#TblgenLspServer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "tablegen"
      ],
      "name": "tblgen_lsp_server",
      "path": "tblgen-lsp-server"
    }

TEAL LS ~
Usage: >
    call lsp_settings#TealLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "teal"
      ],
      "name": "teal_ls",
      "path": "teal-language-server"
    }

TEMPL ~
Usage: >
    call lsp_settings#Templ()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "templ"
      ],
      "name": "templ",
      "path": "templ"
    }

TERRAFORM LSP ~
Usage: >
    call lsp_settings#TerraformLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "terraform",
        "hcl"
      ],
      "name": "terraform_lsp",
      "path": "terraform-lsp"
    }

TERRAFORMLS ~
Usage: >
    call lsp_settings#Terraformls()
<
Defaults: >
    {
      "args": [
        "serve"
      ],
      "filetype": [
        "terraform",
        "terraform-vars"
      ],
      "name": "terraformls",
      "path": "terraform-ls"
    }

TEXLAB ~
Usage: >
    call lsp_settings#Texlab()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "tex",
        "plaintex",
        "bib"
      ],
      "name": "texlab",
      "path": "texlab",
      "workspaceConfig": {
        "settings": {
          "texlab": {
            "bibtexFormatter": "texlab",
            "build": {
              "args": [
                "-pdf",
                "-interaction=nonstopmode",
                "-synctex=1",
                "%f"
              ],
              "executable": "latexmk",
              "forwardSearchAfter": false,
              "onSave": false
            },
            "chktex": {
              "onEdit": false,
              "onOpenAndSave": false
            },
            "diagnosticsDelay": 300,
            "formatterLineLength": 80,
            "forwardSearch": {
              "args": []
            },
            "latexFormatter": "latexindent",
            "latexindent": {
              "modifyLineBreaks": false
            }
          }
        }
      }
    }

TEXTLSP ~
Usage: >
    call lsp_settings#Textlsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "text",
        "tex",
        "org"
      ],
      "name": "textlsp",
      "path": "textlsp",
      "workspaceConfig": {
        "settings": {
          "textLSP": {
            "analysers": {
              "languagetool": {
                "check_text": {
                  "on_change": false,
                  "on_open": true,
                  "on_save": true
                },
                "enabled": true
              }
            },
            "documents": {
              "org": {
                "org_todo_keywords": [
                  "TODO",
                  "IN_PROGRESS",
                  "DONE"
                ]
              }
            }
          }
        }
      }
    }

TFLINT ~
Usage: >
    call lsp_settings#Tflint()
<
Defaults: >
    {
      "args": [
        "--langserver"
      ],
      "filetype": [
        "terraform"
      ],
      "name": "tflint",
      "path": "tflint"
    }

THEME CHECK ~
Usage: >
    call lsp_settings#ThemeCheck()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "liquid"
      ],
      "name": "theme_check",
      "path": "theme-check-language-server",
      "workspaceConfig": {
        "settings": []
      }
    }

THRIFTLS ~
Usage: >
    call lsp_settings#Thriftls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "thrift"
      ],
      "name": "thriftls",
      "path": "thriftls"
    }

TILT LS ~
Usage: >
    call lsp_settings#TiltLs()
<
Defaults: >
    {
      "args": [
        "lsp",
        "start"
      ],
      "filetype": [
        "tiltfile"
      ],
      "name": "tilt_ls",
      "path": "tilt"
    }

TINYMIST ~
Usage: >
    call lsp_settings#Tinymist()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "typst"
      ],
      "name": "tinymist",
      "path": "tinymist"
    }

TS LS ~
Usage: >
    call lsp_settings#TsLs()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "javascript",
        "javascriptreact",
        "javascript.jsx",
        "typescript",
        "typescriptreact",
        "typescript.tsx"
      ],
      "init_options": {
        "hostInfo": "neovim"
      },
      "name": "ts_ls",
      "path": "typescript-language-server"
    }

TS QUERY LS ~
Usage: >
    call lsp_settings#TsQueryLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "query"
      ],
      "name": "ts_query_ls",
      "path": "ts_query_ls",
      "workspaceConfig": {
        "settings": {
          "parser_aliases": {
            "ecma": "javascript",
            "jsx": "javascript",
            "php_only": "php"
          }
        }
      }
    }

TSP SERVER ~
Usage: >
    call lsp_settings#TspServer()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "typespec"
      ],
      "name": "tsp_server",
      "path": "tsp-server"
    }

TTAGS ~
Usage: >
    call lsp_settings#Ttags()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "ruby",
        "rust",
        "javascript",
        "haskell"
      ],
      "name": "ttags",
      "path": "ttags"
    }

TURTLE LS ~
Usage: >
    call lsp_settings#TurtleLs()
<
Defaults: >
    {
      "args": [
        null,
        null,
        "--stdio"
      ],
      "filetype": [
        "turtle",
        "ttl"
      ],
      "name": "turtle_ls",
      "path": "node"
    }

TVM FFI NAVIGATOR ~
Usage: >
    call lsp_settings#TvmFfiNavigator()
<
Defaults: >
    {
      "args": [
        "-m",
        "ffi_navigator.langserver"
      ],
      "filetype": [
        "python",
        "cpp"
      ],
      "name": "tvm_ffi_navigator",
      "path": "python"
    }

TWIGGY LANGUAGE SERVER ~
Usage: >
    call lsp_settings#TwiggyLanguageServer()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "twig"
      ],
      "name": "twiggy_language_server",
      "path": "twiggy-language-server"
    }

TYPEPROF ~
Usage: >
    call lsp_settings#Typeprof()
<
Defaults: >
    {
      "args": [
        "--lsp",
        "--stdio"
      ],
      "filetype": [
        "ruby",
        "eruby"
      ],
      "name": "typeprof",
      "path": "typeprof"
    }

TYPOS LSP ~
Usage: >
    call lsp_settings#TyposLsp()
<
Defaults: >
    {
      "args": [],
      "name": "typos_lsp",
      "path": "typos-lsp",
      "workspaceConfig": {
        "settings": []
      }
    }

TYPST LSP ~
Usage: >
    call lsp_settings#TypstLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "typst"
      ],
      "name": "typst_lsp",
      "path": "typst-lsp"
    }

UIUA ~
Usage: >
    call lsp_settings#Uiua()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "uiua"
      ],
      "name": "uiua",
      "path": "uiua"
    }

UNGRAMMAR LANGUAGESERVER ~
Usage: >
    call lsp_settings#UngrammarLanguageserver()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "ungrammar"
      ],
      "name": "ungrammar_languageserver",
      "path": "ungrammar-languageserver",
      "workspaceConfig": {
        "settings": {
          "ungrammar": {
            "format": {
              "enable": true
            },
            "validate": {
              "enable": true
            }
          }
        }
      }
    }

UNISON ~
Usage: >
    call lsp_settings#Unison()
<
Defaults: >
    {
      "args": [
        "localhost",
        "5757"
      ],
      "filetype": [
        "unison"
      ],
      "name": "unison",
      "path": "nc",
      "workspaceConfig": {
        "settings": []
      }
    }

UNOCSS ~
Usage: >
    call lsp_settings#Unocss()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "erb",
        "haml",
        "hbs",
        "html",
        "css",
        "postcss",
        "javascript",
        "javascriptreact",
        "markdown",
        "ejs",
        "php",
        "svelte",
        "typescript",
        "typescriptreact",
        "vue-html",
        "vue",
        "sass",
        "scss",
        "less",
        "stylus",
        "astro",
        "rescript",
        "rust"
      ],
      "name": "unocss",
      "path": "unocss-language-server"
    }

UVLS ~
Usage: >
    call lsp_settings#Uvls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "uvl"
      ],
      "name": "uvls",
      "path": "uvls"
    }

V ANALYZER ~
Usage: >
    call lsp_settings#VAnalyzer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "v",
        "vsh",
        "vv"
      ],
      "name": "v_analyzer",
      "path": "v-analyzer"
    }

VACUUM ~
Usage: >
    call lsp_settings#Vacuum()
<
Defaults: >
    {
      "args": [
        "language-server"
      ],
      "filetype": [
        "yaml.openapi",
        "json.openapi"
      ],
      "name": "vacuum",
      "path": "vacuum"
    }

VALA LS ~
Usage: >
    call lsp_settings#ValaLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "vala",
        "genie"
      ],
      "name": "vala_ls",
      "path": "vala-language-server"
    }

VALE LS ~
Usage: >
    call lsp_settings#ValeLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "markdown",
        "text",
        "tex"
      ],
      "name": "vale_ls",
      "path": "vale-ls"
    }

VDMJ ~
Usage: >
    call lsp_settings#Vdmj()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "vdmsl",
        "vdmpp",
        "vdmrt"
      ],
      "name": "vdmj",
      "options": {
        "annotation_paths": [],
        "debugger_port": -1,
        "high_precision": false,
        "java": "java",
        "java_opts": [
          "-Xmx3000m",
          "-Xss1m"
        ],
        "logfile": "/home/sacca/.cache/nvim/vdm-lsp.log",
        "mavenrepo": "/home/sacca/.m2/repository/com/fujitsu"
      },
      "path": "java"
    }

VERIBLE ~
Usage: >
    call lsp_settings#Verible()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "systemverilog",
        "verilog"
      ],
      "name": "verible",
      "path": "verible-verilog-ls"
    }

VERIDIAN ~
Usage: >
    call lsp_settings#Veridian()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "systemverilog",
        "verilog"
      ],
      "name": "veridian",
      "path": "veridian"
    }

VERYL LS ~
Usage: >
    call lsp_settings#VerylLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "veryl"
      ],
      "name": "veryl_ls",
      "path": "veryl-ls"
    }

VHDL LS ~
Usage: >
    call lsp_settings#VhdlLs()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "vhd",
        "vhdl"
      ],
      "name": "vhdl_ls",
      "path": "vhdl_ls"
    }

VIMLS ~
Usage: >
    call lsp_settings#Vimls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "vim"
      ],
      "init_options": {
        "diagnostic": {
          "enable": true
        },
        "indexes": {
          "count": 3,
          "gap": 100,
          "projectRootPatterns": [
            "runtime",
            "nvim",
            ".git",
            "autoload",
            "plugin"
          ],
          "runtimepath": true
        },
        "isNeovim": true,
        "iskeyword": "@,48-57,_,192-255,-#",
        "runtimepath": "",
        "suggest": {
          "fromRuntimepath": true,
          "fromVimruntime": true
        },
        "vimruntime": ""
      },
      "name": "vimls",
      "path": "vim-language-server"
    }

VISUALFORCE LS ~
Usage: >
    call lsp_settings#VisualforceLs()
<
Defaults: >
    {
      "filetype": [
        "visualforce"
      ],
      "init_options": {
        "embeddedLanguages": {
          "css": true,
          "javascript": true
        }
      },
      "name": "visualforce_ls"
    }

VLS ~
Usage: >
    call lsp_settings#Vls()
<
Defaults: >
    {
      "args": [
        "ls"
      ],
      "filetype": [
        "v",
        "vlang"
      ],
      "name": "vls",
      "path": "v"
    }

VOLAR ~
Usage: >
    call lsp_settings#Volar()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "vue"
      ],
      "init_options": {
        "typescript": {
          "tsdk": ""
        }
      },
      "name": "volar",
      "path": "vue-language-server"
    }

VSCOQTOP ~
Usage: >
    call lsp_settings#Vscoqtop()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "coq"
      ],
      "name": "vscoqtop",
      "path": "vscoqtop"
    }

VTSLS ~
Usage: >
    call lsp_settings#Vtsls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "javascript",
        "javascriptreact",
        "javascript.jsx",
        "typescript",
        "typescriptreact",
        "typescript.tsx"
      ],
      "name": "vtsls",
      "path": "vtsls"
    }

VUELS ~
Usage: >
    call lsp_settings#Vuels()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "vue"
      ],
      "init_options": {
        "config": {
          "css": [],
          "emmet": [],
          "html": {
            "suggest": []
          },
          "javascript": {
            "format": []
          },
          "stylusSupremacy": [],
          "typescript": {
            "format": []
          },
          "vetur": {
            "completion": {
              "autoImport": false,
              "tagCasing": "kebab",
              "useScaffoldSnippets": false
            },
            "format": {
              "defaultFormatter": {
                "js": "none",
                "ts": "none"
              },
              "defaultFormatterOptions": [],
              "scriptInitialIndent": false,
              "styleInitialIndent": false
            },
            "useWorkspaceDependencies": false,
            "validation": {
              "script": true,
              "style": true,
              "template": true
            }
          }
        }
      },
      "name": "vuels",
      "path": "vls"
    }

WGSL ANALYZER ~
Usage: >
    call lsp_settings#WgslAnalyzer()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "wgsl"
      ],
      "name": "wgsl_analyzer",
      "path": "wgsl_analyzer",
      "workspaceConfig": {
        "settings": []
      }
    }

YAMLLS ~
Usage: >
    call lsp_settings#Yamlls()
<
Defaults: >
    {
      "args": [
        "--stdio"
      ],
      "filetype": [
        "yaml",
        "yaml.docker-compose",
        "yaml.gitlab"
      ],
      "name": "yamlls",
      "path": "yaml-language-server",
      "workspaceConfig": {
        "settings": {
          "redhat": {
            "telemetry": {
              "enabled": false
            }
          }
        }
      }
    }

YANG LSP ~
Usage: >
    call lsp_settings#YangLsp()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "yang"
      ],
      "name": "yang_lsp",
      "path": "yang-language-server"
    }

YLS ~
Usage: >
    call lsp_settings#Yls()
<
Defaults: >
    {
      "args": [
        "-vv"
      ],
      "filetype": [
        "yar",
        "yara"
      ],
      "name": "yls",
      "path": "yls"
    }

ZIGGY ~
Usage: >
    call lsp_settings#Ziggy()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "ziggy"
      ],
      "name": "ziggy",
      "path": "ziggy"
    }

ZIGGY SCHEMA ~
Usage: >
    call lsp_settings#ZiggySchema()
<
Defaults: >
    {
      "args": [
        "lsp",
        "--schema"
      ],
      "filetype": [
        "ziggy_schema"
      ],
      "name": "ziggy_schema",
      "path": "ziggy"
    }

ZK ~
Usage: >
    call lsp_settings#Zk()
<
Defaults: >
    {
      "args": [
        "lsp"
      ],
      "filetype": [
        "markdown"
      ],
      "name": "zk",
      "path": "zk"
    }

ZLS ~
Usage: >
    call lsp_settings#Zls()
<
Defaults: >
    {
      "args": [],
      "filetype": [
        "zig",
        "zir"
      ],
      "name": "zls",
      "path": "zls"
    }

vim:tw=78:ts=8:noet:ft=help:norl:
